import 'package:app/services/api_service.dart';
import 'package:app/services/biometric_service.dart';
import 'package:app/styles/styles.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

class RegisterScreen extends StatefulWidget {
  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _biometricService = BiometricService();

  void _showPinDialog() {
    Get.to(
      () => PinRegisterScreen(),
      transition: Transition.fade,
    );
  }

  void _registerWithFaceId() {
    // Simuler l'authentification réussie pour le test sur un émulateur
    _showBiometricDialog(
      title: 'Face ID Registration',
      message: 'Votre visage est en cours de reconnaissance...',
      icon: Icons.face,
      onConfirm: () async {
        try {
          await ApiService.register(
            'FaceIDUser_${DateTime.now().millisecondsSinceEpoch}',
            '0000',
            'default',
            true,
          );
          Get.back(); // Ferme la boîte de dialogue
          Get.offNamed('/login');
        } catch (e) {
          Get.snackbar('Erreur', e.toString(), backgroundColor: Styles.defaultRedColor);
        }
      },
    );
  }

  void _registerWithTouchId() {
    // Simuler l'authentification réussie pour le test sur un émulateur
    _showBiometricDialog(
      title: 'Touch ID Registration',
      message: 'Placez et maintenez votre doigt sur le lecteur d’empreintes...',
      icon: Icons.fingerprint,
      onConfirm: () async {
        try {
          await ApiService.register(
            'TouchIDUser_${DateTime.now().millisecondsSinceEpoch}',
            '0000',
            'default',
            true,
          );
          Get.back(); // Ferme la boîte de dialogue
          Get.offNamed('/login');
        } catch (e) {
          Get.snackbar('Erreur', e.toString(), backgroundColor: Styles.defaultRedColor);
        }
      },
    );
  }

  void _showBiometricDialog({
    required String title,
    required String message,
    required IconData icon,
    required VoidCallback onConfirm,
  }) {
    Get.defaultDialog(
      backgroundColor: Styles.scaffoldBackgroundColor,
      title: title,
      titleStyle: TextStyle(
        fontFamily: 'Rubik',
        color: Styles.defaultYellowColor,
        fontSize: 24,
      ),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 100,
            color: Styles.defaultYellowColor,
          ),
          SizedBox(height: Styles.defaultPadding),
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(color: Styles.defaultYellowColor, width: 2),
            ),
            child: CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Styles.defaultYellowColor),
              strokeWidth: 2,
            ),
          ),
          SizedBox(height: Styles.defaultPadding),
          Text(
            message,
            style: TextStyle(
              fontFamily: 'Rubik',
              color: Styles.defaultLightWhiteColor,
              fontSize: 18,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
      confirm: ElevatedButton(
        onPressed: onConfirm,
        style: ElevatedButton.styleFrom(
          backgroundColor: Styles.defaultBlueColor,
          foregroundColor: Styles.defaultYellowColor,
          padding: EdgeInsets.symmetric(vertical: 12, horizontal: 30),
          shape: RoundedRectangleBorder(borderRadius: Styles.defaultBorderRadius),
        ),
        child: Text(
          'Confirmer',
          style: TextStyle(fontSize: 16, fontFamily: 'Rubik'),
        ),
      ),
      cancel: TextButton(
        onPressed: () => Get.back(),
        child: Text(
          'Annuler',
          style: TextStyle(color: Styles.defaultYellowColor, fontFamily: 'Rubik', fontSize: 16),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SmartPay Register', style: TextStyle(fontFamily: 'Rubik')),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(
              width: 250,
              height: 60,
              child: ElevatedButton(
                onPressed: _showPinDialog,
                child: Text(
                  'Register with Code PIN',
                  style: TextStyle(fontSize: 18, fontFamily: 'Rubik'),
                ),
              ),
            ),
            SizedBox(height: Styles.defaultPadding),
            SizedBox(
              width: 250,
              height: 60,
              child: ElevatedButton(
                onPressed: _registerWithFaceId, // Simule Face ID sans vérification biométrique
                child: Text(
                  'Register with Face ID',
                  style: TextStyle(fontSize: 18, fontFamily: 'Rubik'),
                ),
              ),
            ),
            SizedBox(height: Styles.defaultPadding),
            SizedBox(
              width: 250,
              height: 60,
              child: ElevatedButton(
                onPressed: _registerWithTouchId, // Simule Touch ID sans vérification biométrique
                child: Text(
                  'Register with Touch ID',
                  style: TextStyle(fontSize: 18, fontFamily: 'Rubik'),
                ),
              ),
            ),
            SizedBox(height: Styles.defaultPadding * 2),
            TextButton(
              onPressed: () => Get.offNamed('/login'),
              child: Text(
                'Login if I have an account',
                style: TextStyle(
                  fontFamily: 'Rubik',
                  color: Styles.defaultYellowColor,
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Nouvelle classe pour la fenêtre d'enregistrement avec PIN (restée inchangée)
class PinRegisterScreen extends StatefulWidget {
  @override
  _PinRegisterScreenState createState() => _PinRegisterScreenState();
}

class _PinRegisterScreenState extends State<PinRegisterScreen> {
  final _nameController = TextEditingController();
  final _pinController = TextEditingController();
  final _answerController = TextEditingController();
  String _enteredPin = '';

  void _addNumber(String number) {
    if (_enteredPin.length < 4) {
      setState(() {
        _enteredPin += number;
        _pinController.text = _enteredPin;
      });
    }
  }

  void _deleteNumber() {
    if (_enteredPin.isNotEmpty) {
      setState(() {
        _enteredPin = _enteredPin.substring(0, _enteredPin.length - 1);
        _pinController.text = _enteredPin;
      });
    }
  }

  void _registerWithPin() async {
    if (_enteredPin.length != 4 || _nameController.text.isEmpty || _answerController.text.isEmpty) {
      Get.snackbar('Erreur', 'Veuillez remplir tous les champs correctement', backgroundColor: Styles.defaultRedColor);
      return;
    }
    try {
      await ApiService.register(
        _nameController.text,
        _pinController.text,
        _answerController.text,
        false,
      );
      Get.offNamed('/login');
    } catch (e) {
      Get.snackbar('Erreur', e.toString(), backgroundColor: Styles.defaultRedColor);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Styles.scaffoldBackgroundColor,
      appBar: AppBar(
        backgroundColor: Styles.scaffoldBackgroundColor,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.close, color: Styles.defaultYellowColor),
          onPressed: () => Get.back(),
        ),
        title: Text(
          'Register with PIN',
          style: TextStyle(fontFamily: 'Rubik', color: Styles.defaultYellowColor, fontSize: 24),
        ),
        centerTitle: true,
      ),
      body: Padding(
        padding: EdgeInsets.all(Styles.defaultPadding * 1.5),
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(4, (index) {
                  return Padding(
                    padding: EdgeInsets.symmetric(horizontal: 10),
                    child: Container(
                      width: 20,
                      height: 20,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: index < _enteredPin.length ? Styles.defaultYellowColor : Styles.defaultGreyColor,
                        border: Border.all(color: Styles.defaultLightWhiteColor),
                      ),
                    ),
                  );
                }),
              ),
              SizedBox(height: Styles.defaultPadding * 2),
              Text(
                _enteredPin.isEmpty ? '****' : _enteredPin,
                style: TextStyle(
                  fontFamily: 'Rubik',
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: Styles.defaultYellowColor,
                ),
              ),
              SizedBox(height: Styles.defaultPadding * 2),
              TextField(
                controller: _nameController,
                decoration: InputDecoration(
                  labelText: 'Nom',
                  labelStyle: TextStyle(color: Styles.defaultLightWhiteColor),
                  filled: true,
                  fillColor: Styles.defaultLightGreyColor.withOpacity(0.2),
                  enabledBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Styles.defaultGreyColor),
                    borderRadius: Styles.defaultBorderRadius,
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Styles.defaultYellowColor, width: 2),
                    borderRadius: Styles.defaultBorderRadius,
                  ),
                ),
                style: TextStyle(color: Styles.defaultYellowColor, fontFamily: 'Rubik', fontSize: 18),
              ),
              SizedBox(height: Styles.defaultPadding),
              TextField(
                controller: _answerController,
                decoration: InputDecoration(
                  labelText: 'Nom de votre animal',
                  labelStyle: TextStyle(color: Styles.defaultLightWhiteColor),
                  filled: true,
                  fillColor: Styles.defaultLightGreyColor.withOpacity(0.2),
                  enabledBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Styles.defaultGreyColor),
                    borderRadius: Styles.defaultBorderRadius,
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Styles.defaultYellowColor, width: 2),
                    borderRadius: Styles.defaultBorderRadius,
                  ),
                ),
                style: TextStyle(color: Styles.defaultYellowColor, fontFamily: 'Rubik', fontSize: 18),
              ),
              SizedBox(height: Styles.defaultPadding * 2),
              GridView.count(
                shrinkWrap: true,
                crossAxisCount: 3,
                mainAxisSpacing: 15,
                crossAxisSpacing: 15,
                childAspectRatio: 1.2,
                children: List.generate(9, (index) {
                  return ElevatedButton(
                    onPressed: () => _addNumber('${index + 1}'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Styles.defaultLightGreyColor,
                      foregroundColor: Colors.black,
                      elevation: 5,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                    ),
                    child: Text(
                      '${index + 1}',
                      style: TextStyle(fontSize: 24, fontFamily: 'Rubik', fontWeight: FontWeight.bold),
                    ),
                  );
                })..addAll([
                  ElevatedButton(
                    onPressed: _deleteNumber,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Styles.defaultLightGreyColor,
                      foregroundColor: Colors.black,
                      elevation: 5,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                    ),
                    child: Icon(Icons.backspace, size: 24, color: Styles.defaultYellowColor),
                  ),
                  ElevatedButton(
                    onPressed: () => _addNumber('0'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Styles.defaultLightGreyColor,
                      foregroundColor: Colors.black,
                      elevation: 5,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                    ),
                    child: Text(
                      '0',
                      style: TextStyle(fontSize: 24, fontFamily: 'Rubik', fontWeight: FontWeight.bold),
                    ),
                  ),
                  SizedBox.shrink(),
                ]),
              ),
              SizedBox(height: Styles.defaultPadding * 2),
              ElevatedButton(
                onPressed: _enteredPin.length == 4 &&
                        _nameController.text.isNotEmpty &&
                        _answerController.text.isNotEmpty
                    ? _registerWithPin
                    : null,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Styles.defaultBlueColor,
                  foregroundColor: Styles.defaultYellowColor,
                  padding: EdgeInsets.symmetric(vertical: 18, horizontal: 80),
                  elevation: 5,
                  shape: RoundedRectangleBorder(borderRadius: Styles.defaultBorderRadius),
                ),
                child: Text(
                  'SUBMIT',
                  style: TextStyle(fontSize: 20, fontFamily: 'Rubik', fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}